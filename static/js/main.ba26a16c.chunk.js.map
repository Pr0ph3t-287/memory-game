{"version":3,"sources":["gifs/tenor.gif","gifs/tenor2.gif","gifs/tenor3.gif","gifs/tenor4.gif","gifs/tenor5.gif","gifs/tenor6.gif","gifs/tenor7.gif","gifs/tenor8.gif","gifs/tenor9.gif","gifs/tenor10.gif","gifs/tenor11.gif","gifs/tenor12.gif","gifs/tenor13.gif","components/card.js","components/scoreboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","componentArray","Gif1","Gif2","Gif3","Gif4","Gif5","Gif6","Gif7","Gif8","Gif9","Gif10","Gif11","Gif12","Gif13","map","card","index","src","alt","name","key","className","useState","cards","setCards","useEffect","shuffle","i","length","j","Math","floor","random","buttons","document","querySelectorAll","addEventListener","removeEventListener","Scoreboard","score","setScore","highScore","setHighScore","alreadyClicked","setAlreadyClicked","incrementScore","event","console","log","target","includes","concat","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ba26a16c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tenor.69aa3b9e.gif\";","module.exports = __webpack_public_path__ + \"static/media/tenor2.8f43b673.gif\";","module.exports = __webpack_public_path__ + \"static/media/tenor3.f630eda5.gif\";","module.exports = __webpack_public_path__ + \"static/media/tenor4.7a990dc1.gif\";","module.exports = __webpack_public_path__ + \"static/media/tenor5.91e74af3.gif\";","module.exports = __webpack_public_path__ + \"static/media/tenor6.1ef73aba.gif\";","module.exports = __webpack_public_path__ + \"static/media/tenor7.d10ce95b.gif\";","module.exports = __webpack_public_path__ + \"static/media/tenor8.36029a31.gif\";","module.exports = __webpack_public_path__ + \"static/media/tenor9.452c2fce.gif\";","module.exports = __webpack_public_path__ + \"static/media/tenor10.055c150a.gif\";","module.exports = __webpack_public_path__ + \"static/media/tenor11.683d2a25.gif\";","module.exports = __webpack_public_path__ + \"static/media/tenor12.e71908f5.gif\";","module.exports = __webpack_public_path__ + \"static/media/tenor13.a6fdff77.gif\";","import React, { useState, useEffect } from 'react';\n\nimport Gif1 from '../gifs/tenor.gif';\nimport Gif2 from '../gifs/tenor2.gif';\nimport Gif3 from '../gifs/tenor3.gif';\nimport Gif4 from '../gifs/tenor4.gif';\nimport Gif5 from '../gifs/tenor5.gif';\nimport Gif6 from '../gifs/tenor6.gif';\nimport Gif7 from '../gifs/tenor7.gif';\nimport Gif8 from '../gifs/tenor8.gif';\nimport Gif9 from '../gifs/tenor9.gif';\nimport Gif10 from '../gifs/tenor10.gif';\nimport Gif11 from '../gifs/tenor11.gif';\nimport Gif12 from '../gifs/tenor12.gif';\nimport Gif13 from '../gifs/tenor13.gif';\n\n\nfunction Card() {\n  const sourceArray = [Gif1, Gif2, Gif3, Gif4, Gif5, Gif6, Gif7, Gif8, Gif9, Gif10, Gif11, Gif12, Gif13];\n\n  const componentArray = sourceArray.map((card, index) => (\n    <img src={card} alt=\"gif\"  name={index} key={index} className=\"card\" />\n  ));\n\n  const [cards, setCards] = useState([...componentArray]); \n\n  useEffect(() => {\n    const shuffle = () => {\n      for (let i = componentArray.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [componentArray[i], componentArray[j]] = [componentArray[j], componentArray[i]];\n      }\n      \n      if (cards !== componentArray) {\n        setCards([...componentArray]);\n      }\n    };\n    let buttons = document.querySelectorAll(\".card\");\n\n    for(let i = 0; i < buttons.length; i++){\n      buttons[i].addEventListener('click', shuffle);\n    } \n\n    return () => {\n      let buttons = document.querySelectorAll(\".card\");\n\n      for(let i = 0; i < buttons.length; i++){\n        buttons[i].removeEventListener('click', shuffle);\n      }\n    };\n  }, [cards]);\n\n  return (\n    <div className=\"card-grid\">\n      {cards}\n    </div>\n  );\n}\n\nexport default Card;","import React, { useState, useEffect } from 'react';\nimport Card from './card';\n\nfunction Scoreboard() {\n  const [score, setScore] = useState(0);\n  const [highScore, setHighScore] = useState(0);\n  const [alreadyClicked, setAlreadyClicked] = useState([]);\n\n  useEffect(() => {\n    if (score > highScore) {\n      setHighScore(score);\n    }\n\n    const incrementScore = (event) => {\n      console.log(event.target.name);\n      if (alreadyClicked.includes(event.target.name)) {\n        setScore(1);\n        setAlreadyClicked([]);\n        setAlreadyClicked(alreadyClicked.concat(event.target.name))\n      } else {\n        setScore(score + 1);\n        setAlreadyClicked(alreadyClicked.concat(event.target.name));\n      }\n    };\n\n    let buttons = document.querySelectorAll(\".card\");\n\n    for(let i = 0; i < buttons.length; i++){\n      buttons[i].addEventListener('click', incrementScore);\n    } \n\n    return () => {\n      let buttons = document.querySelectorAll(\".card\");\n\n      for(let i = 0; i < buttons.length; i++){\n        buttons[i].removeEventListener('click', incrementScore);\n      }\n    };\n  }, [score, highScore]);\n\n\n  return (\n    <div className=\"scoreCard\">\n      <div>Score:&nbsp;{score}&nbsp;High Score&nbsp;{highScore}</div>\n      <Card />\n    </div>\n  );\n}\n\nexport default Scoreboard;","import React from 'react';\nimport './App.css';\nimport Card from './components/card.js';\nimport Scoreboard from './components/scoreboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Memory game</h1>\n      <Scoreboard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}